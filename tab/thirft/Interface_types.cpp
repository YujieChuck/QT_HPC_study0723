/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Interface_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace UpdateService {


FileData::~FileData() throw() {
}


void FileData::__set_strFileName(const std::string& val) {
  this->strFileName = val;
}

void FileData::__set_buff(const std::string& val) {
  this->buff = val;
}

uint32_t FileData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_strFileName = false;
  bool isset_buff = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strFileName);
          isset_strFileName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->buff);
          isset_buff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_strFileName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_buff)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t FileData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FileData");

  xfer += oprot->writeFieldBegin("strFileName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->strFileName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buff", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->buff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileData &a, FileData &b) {
  using ::std::swap;
  swap(a.strFileName, b.strFileName);
  swap(a.buff, b.buff);
}

FileData::FileData(const FileData& other0) {
  strFileName = other0.strFileName;
  buff = other0.buff;
}
FileData& FileData::operator=(const FileData& other1) {
  strFileName = other1.strFileName;
  buff = other1.buff;
  return *this;
}
void FileData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileData(";
  out << "strFileName=" << to_string(strFileName);
  out << ", " << "buff=" << to_string(buff);
  out << ")";
}


VersionInfo::~VersionInfo() throw() {
}


void VersionInfo::__set_uniqueFlag(const std::string& val) {
  this->uniqueFlag = val;
}

void VersionInfo::__set_title(const std::string& val) {
  this->title = val;
}

void VersionInfo::__set_updateTime(const std::string& val) {
  this->updateTime = val;
}

void VersionInfo::__set_updateInfo(const std::string& val) {
  this->updateInfo = val;
}

uint32_t VersionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uniqueFlag = false;
  bool isset_title = false;
  bool isset_updateTime = false;
  bool isset_updateInfo = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uniqueFlag);
          isset_uniqueFlag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updateTime);
          isset_updateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updateInfo);
          isset_updateInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uniqueFlag)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updateTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_updateInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t VersionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VersionInfo");

  xfer += oprot->writeFieldBegin("uniqueFlag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->uniqueFlag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updateTime", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->updateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updateInfo", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->updateInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VersionInfo &a, VersionInfo &b) {
  using ::std::swap;
  swap(a.uniqueFlag, b.uniqueFlag);
  swap(a.title, b.title);
  swap(a.updateTime, b.updateTime);
  swap(a.updateInfo, b.updateInfo);
}

VersionInfo::VersionInfo(const VersionInfo& other2) {
  uniqueFlag = other2.uniqueFlag;
  title = other2.title;
  updateTime = other2.updateTime;
  updateInfo = other2.updateInfo;
}
VersionInfo& VersionInfo::operator=(const VersionInfo& other3) {
  uniqueFlag = other3.uniqueFlag;
  title = other3.title;
  updateTime = other3.updateTime;
  updateInfo = other3.updateInfo;
  return *this;
}
void VersionInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VersionInfo(";
  out << "uniqueFlag=" << to_string(uniqueFlag);
  out << ", " << "title=" << to_string(title);
  out << ", " << "updateTime=" << to_string(updateTime);
  out << ", " << "updateInfo=" << to_string(updateInfo);
  out << ")";
}

} // namespace
