/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCMasterService_H
#define RPCMasterService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Interface_types.h"

namespace UpdateService {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RPCMasterServiceIf {
 public:
  virtual ~RPCMasterServiceIf() {}
  virtual bool updateProgram(const VersionInfo& _versionInfo) = 0;
  virtual bool getupdateInfo(const VersionInfo& _versionInfo) = 0;
  virtual bool getUpdateFile(const std::vector<FileData> & _listFileData) = 0;
};

class RPCMasterServiceIfFactory {
 public:
  typedef RPCMasterServiceIf Handler;

  virtual ~RPCMasterServiceIfFactory() {}

  virtual RPCMasterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCMasterServiceIf* /* handler */) = 0;
};

class RPCMasterServiceIfSingletonFactory : virtual public RPCMasterServiceIfFactory {
 public:
  RPCMasterServiceIfSingletonFactory(const boost::shared_ptr<RPCMasterServiceIf>& iface) : iface_(iface) {}
  virtual ~RPCMasterServiceIfSingletonFactory() {}

  virtual RPCMasterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCMasterServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCMasterServiceIf> iface_;
};

class RPCMasterServiceNull : virtual public RPCMasterServiceIf {
 public:
  virtual ~RPCMasterServiceNull() {}
  bool updateProgram(const VersionInfo& /* _versionInfo */) {
    bool _return = false;
    return _return;
  }
  bool getupdateInfo(const VersionInfo& /* _versionInfo */) {
    bool _return = false;
    return _return;
  }
  bool getUpdateFile(const std::vector<FileData> & /* _listFileData */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _RPCMasterService_updateProgram_args__isset {
  _RPCMasterService_updateProgram_args__isset() : _versionInfo(false) {}
  bool _versionInfo :1;
} _RPCMasterService_updateProgram_args__isset;

class RPCMasterService_updateProgram_args {
 public:

  RPCMasterService_updateProgram_args(const RPCMasterService_updateProgram_args&);
  RPCMasterService_updateProgram_args& operator=(const RPCMasterService_updateProgram_args&);
  RPCMasterService_updateProgram_args() {
  }

  virtual ~RPCMasterService_updateProgram_args() throw();
  VersionInfo _versionInfo;

  _RPCMasterService_updateProgram_args__isset __isset;

  void __set__versionInfo(const VersionInfo& val);

  bool operator == (const RPCMasterService_updateProgram_args & rhs) const
  {
    if (!(_versionInfo == rhs._versionInfo))
      return false;
    return true;
  }
  bool operator != (const RPCMasterService_updateProgram_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCMasterService_updateProgram_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCMasterService_updateProgram_pargs {
 public:


  virtual ~RPCMasterService_updateProgram_pargs() throw();
  const VersionInfo* _versionInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCMasterService_updateProgram_result__isset {
  _RPCMasterService_updateProgram_result__isset() : success(false) {}
  bool success :1;
} _RPCMasterService_updateProgram_result__isset;

class RPCMasterService_updateProgram_result {
 public:

  RPCMasterService_updateProgram_result(const RPCMasterService_updateProgram_result&);
  RPCMasterService_updateProgram_result& operator=(const RPCMasterService_updateProgram_result&);
  RPCMasterService_updateProgram_result() : success(0) {
  }

  virtual ~RPCMasterService_updateProgram_result() throw();
  bool success;

  _RPCMasterService_updateProgram_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RPCMasterService_updateProgram_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCMasterService_updateProgram_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCMasterService_updateProgram_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCMasterService_updateProgram_presult__isset {
  _RPCMasterService_updateProgram_presult__isset() : success(false) {}
  bool success :1;
} _RPCMasterService_updateProgram_presult__isset;

class RPCMasterService_updateProgram_presult {
 public:


  virtual ~RPCMasterService_updateProgram_presult() throw();
  bool* success;

  _RPCMasterService_updateProgram_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RPCMasterService_getupdateInfo_args__isset {
  _RPCMasterService_getupdateInfo_args__isset() : _versionInfo(false) {}
  bool _versionInfo :1;
} _RPCMasterService_getupdateInfo_args__isset;

class RPCMasterService_getupdateInfo_args {
 public:

  RPCMasterService_getupdateInfo_args(const RPCMasterService_getupdateInfo_args&);
  RPCMasterService_getupdateInfo_args& operator=(const RPCMasterService_getupdateInfo_args&);
  RPCMasterService_getupdateInfo_args() {
  }

  virtual ~RPCMasterService_getupdateInfo_args() throw();
  VersionInfo _versionInfo;

  _RPCMasterService_getupdateInfo_args__isset __isset;

  void __set__versionInfo(const VersionInfo& val);

  bool operator == (const RPCMasterService_getupdateInfo_args & rhs) const
  {
    if (!(_versionInfo == rhs._versionInfo))
      return false;
    return true;
  }
  bool operator != (const RPCMasterService_getupdateInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCMasterService_getupdateInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCMasterService_getupdateInfo_pargs {
 public:


  virtual ~RPCMasterService_getupdateInfo_pargs() throw();
  const VersionInfo* _versionInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCMasterService_getupdateInfo_result__isset {
  _RPCMasterService_getupdateInfo_result__isset() : success(false) {}
  bool success :1;
} _RPCMasterService_getupdateInfo_result__isset;

class RPCMasterService_getupdateInfo_result {
 public:

  RPCMasterService_getupdateInfo_result(const RPCMasterService_getupdateInfo_result&);
  RPCMasterService_getupdateInfo_result& operator=(const RPCMasterService_getupdateInfo_result&);
  RPCMasterService_getupdateInfo_result() : success(0) {
  }

  virtual ~RPCMasterService_getupdateInfo_result() throw();
  bool success;

  _RPCMasterService_getupdateInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RPCMasterService_getupdateInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCMasterService_getupdateInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCMasterService_getupdateInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCMasterService_getupdateInfo_presult__isset {
  _RPCMasterService_getupdateInfo_presult__isset() : success(false) {}
  bool success :1;
} _RPCMasterService_getupdateInfo_presult__isset;

class RPCMasterService_getupdateInfo_presult {
 public:


  virtual ~RPCMasterService_getupdateInfo_presult() throw();
  bool* success;

  _RPCMasterService_getupdateInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RPCMasterService_getUpdateFile_args__isset {
  _RPCMasterService_getUpdateFile_args__isset() : _listFileData(false) {}
  bool _listFileData :1;
} _RPCMasterService_getUpdateFile_args__isset;

class RPCMasterService_getUpdateFile_args {
 public:

  RPCMasterService_getUpdateFile_args(const RPCMasterService_getUpdateFile_args&);
  RPCMasterService_getUpdateFile_args& operator=(const RPCMasterService_getUpdateFile_args&);
  RPCMasterService_getUpdateFile_args() {
  }

  virtual ~RPCMasterService_getUpdateFile_args() throw();
  std::vector<FileData>  _listFileData;

  _RPCMasterService_getUpdateFile_args__isset __isset;

  void __set__listFileData(const std::vector<FileData> & val);

  bool operator == (const RPCMasterService_getUpdateFile_args & rhs) const
  {
    if (!(_listFileData == rhs._listFileData))
      return false;
    return true;
  }
  bool operator != (const RPCMasterService_getUpdateFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCMasterService_getUpdateFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCMasterService_getUpdateFile_pargs {
 public:


  virtual ~RPCMasterService_getUpdateFile_pargs() throw();
  const std::vector<FileData> * _listFileData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCMasterService_getUpdateFile_result__isset {
  _RPCMasterService_getUpdateFile_result__isset() : success(false) {}
  bool success :1;
} _RPCMasterService_getUpdateFile_result__isset;

class RPCMasterService_getUpdateFile_result {
 public:

  RPCMasterService_getUpdateFile_result(const RPCMasterService_getUpdateFile_result&);
  RPCMasterService_getUpdateFile_result& operator=(const RPCMasterService_getUpdateFile_result&);
  RPCMasterService_getUpdateFile_result() : success(0) {
  }

  virtual ~RPCMasterService_getUpdateFile_result() throw();
  bool success;

  _RPCMasterService_getUpdateFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RPCMasterService_getUpdateFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCMasterService_getUpdateFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCMasterService_getUpdateFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCMasterService_getUpdateFile_presult__isset {
  _RPCMasterService_getUpdateFile_presult__isset() : success(false) {}
  bool success :1;
} _RPCMasterService_getUpdateFile_presult__isset;

class RPCMasterService_getUpdateFile_presult {
 public:


  virtual ~RPCMasterService_getUpdateFile_presult() throw();
  bool* success;

  _RPCMasterService_getUpdateFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCMasterServiceClient : virtual public RPCMasterServiceIf {
 public:
  RPCMasterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCMasterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool updateProgram(const VersionInfo& _versionInfo);
  void send_updateProgram(const VersionInfo& _versionInfo);
  bool recv_updateProgram();
  bool getupdateInfo(const VersionInfo& _versionInfo);
  void send_getupdateInfo(const VersionInfo& _versionInfo);
  bool recv_getupdateInfo();
  bool getUpdateFile(const std::vector<FileData> & _listFileData);
  void send_getUpdateFile(const std::vector<FileData> & _listFileData);
  bool recv_getUpdateFile();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCMasterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCMasterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCMasterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_updateProgram(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getupdateInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUpdateFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCMasterServiceProcessor(boost::shared_ptr<RPCMasterServiceIf> iface) :
    iface_(iface) {
    processMap_["updateProgram"] = &RPCMasterServiceProcessor::process_updateProgram;
    processMap_["getupdateInfo"] = &RPCMasterServiceProcessor::process_getupdateInfo;
    processMap_["getUpdateFile"] = &RPCMasterServiceProcessor::process_getUpdateFile;
  }

  virtual ~RPCMasterServiceProcessor() {}
};

class RPCMasterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCMasterServiceProcessorFactory(const ::boost::shared_ptr< RPCMasterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCMasterServiceIfFactory > handlerFactory_;
};

class RPCMasterServiceMultiface : virtual public RPCMasterServiceIf {
 public:
  RPCMasterServiceMultiface(std::vector<boost::shared_ptr<RPCMasterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCMasterServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCMasterServiceIf> > ifaces_;
  RPCMasterServiceMultiface() {}
  void add(boost::shared_ptr<RPCMasterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool updateProgram(const VersionInfo& _versionInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProgram(_versionInfo);
    }
    return ifaces_[i]->updateProgram(_versionInfo);
  }

  bool getupdateInfo(const VersionInfo& _versionInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getupdateInfo(_versionInfo);
    }
    return ifaces_[i]->getupdateInfo(_versionInfo);
  }

  bool getUpdateFile(const std::vector<FileData> & _listFileData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUpdateFile(_listFileData);
    }
    return ifaces_[i]->getUpdateFile(_listFileData);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RPCMasterServiceConcurrentClient : virtual public RPCMasterServiceIf {
 public:
  RPCMasterServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RPCMasterServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool updateProgram(const VersionInfo& _versionInfo);
  int32_t send_updateProgram(const VersionInfo& _versionInfo);
  bool recv_updateProgram(const int32_t seqid);
  bool getupdateInfo(const VersionInfo& _versionInfo);
  int32_t send_getupdateInfo(const VersionInfo& _versionInfo);
  bool recv_getupdateInfo(const int32_t seqid);
  bool getUpdateFile(const std::vector<FileData> & _listFileData);
  int32_t send_getUpdateFile(const std::vector<FileData> & _listFileData);
  bool recv_getUpdateFile(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
